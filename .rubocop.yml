inherit_mode:
  merge:
    - Exclude
    - Include

require:
  - rubocop-performance
  - rubocop-rake

AllCops:
  ActiveSupportExtensionsEnabled: true
  DisplayStyleGuide: true
  ExtraDetails: true
  NewCops: enable

# Checks if the code style follows the ExpectedOrder configuration.
Layout/ClassStructure:
  Enabled: true
  ExpectedOrder:
    - module_inclusion
    - constants
    - association
    - public_attribute_macros
    - public_delegate
    - macros
    - public_class_methods
    - initializer
    - public_methods
    - protected_attribute_macros
    - protected_methods
    - private_attribute_macros
    - private_delegate
    - private_methods

# Enforces empty line after multiline condition.
Layout/EmptyLineAfterMultilineCondition:
  Enabled: true

# Checks the indentation of the first key in a hash literal where the opening
# brace and the first key are on separate lines.
Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

# Checks for the placement of the closing parenthesis in a method call that
# passes a HEREDOC string as an argument.
Layout/HeredocArgumentClosingParenthesis:
  Enabled: true

# Checks that each item in a multi-line array literal starts on a separate line.
Layout/MultilineArrayLineBreaks:
  Enabled: true

# Check for a newline after the assignment operator in multi-line assignments.
Layout/MultilineAssignmentLayout:
  Enabled: true

# Ensures that each key in a multi-line hash starts on a separate line.
Layout/MultilineHashKeyLineBreaks:
  Enabled: true

# Checks that each argument in a multi-line method call starts on a separate
# line.
Layout/MultilineMethodArgumentLineBreaks:
  Enabled: true

# Checks the indentation of the method name part in method calls that span more 
# than one line.
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented_relative_to_receiver

# Checks that each parameter in a multi-line method definition starts on a
# separate line.
Layout/MultilineMethodParameterLineBreaks:
  Enabled: true

# Checks for the ordering of a method call where the receiver of the call is a
# HEREDOC.
Lint/HeredocMethodCallPosition:
  Enabled: true

# Checks if the length of a block exceeds some maximum value.
Metrics/BlockLength:
  CountAsOne:
    - array
    - hash
    - heredoc
    - method_call
  AllowedMethods:
    - context
    - describe

# Checks if the length a class exceeds some maximum value.
Metrics/ClassLength:
  CountAsOne:
    - array
    - hash
    - heredoc
    - method_call

# Checks if the length of a method exceeds some maximum value.
Metrics/MethodLength:
  CountAsOne:
    - array
    - hash
    - heredoc
    - method_call

# Checks if the length of a module exceeds some maximum value.
Metrics/ModuleLength:
  CountAsOne:
    - array
    - hash
    - heredoc
    - method_call

# Recommends the use of inclusive language instead of problematic terms.
Naming/InclusiveLanguage:
  Enabled: true

# Identifies use of methods that generate a new intermediate array that is
# promptly thrown away.
Performance/ChainArrayAllocation:
  Enabled: true

# Identifies places where inefficient `readlines` method can be replaced by
# `each_line` to avoid fully loading file content into memory.
Performance/IoReadlines:
  Enabled: true

# Identifies places where `select.map` can be replaced by `filter_map`.
# Requires Ruby 2.7
Performance/SelectMap:
  Enabled: true

# Use Array() instead of explicit Array check or [*var], when dealing with a
# variable you want to treat as an Array, but you're not certain it's an array.
Style/ArrayCoercion:
  Enabled: true

# Checks for cases when you could use a block accepting version of a method that
# does automatic resource cleanup.
Style/AutoResourceCleanup:
  Enabled: true

# Enforces using `def self.method_name` or `class << self` to define class
# methods.
Style/ClassMethodsDefinitions:
  Enabled: true

# Preferred collection methods.
Style/CollectionMethods:
  Enabled: true

# Checks for consistent usage of the `DateTime` class over the `Time` class.
Style/DateTime:
  Enabled: true

# Checks for missing top-level documentation of classes and modules.
Style/Documentation:
  Enabled: false

# Checks for methods called on a `do`...`â€‹end` block.
Style/MethodCalledOnDoEndBlock:
  Enabled: true

# Checks for method signatures that span multiple lines.
Style/MultilineMethodSignature:
  Enabled: true

# Checks for options hashes and discourages them if the current Ruby version
# supports keyword arguments.
Style/OptionHash:
  Enabled: true

# Sort `require` and `require_relative` in alphabetical order.
Style/RequireOrder:
  Enabled: true

# Enforces consistency between `return nil` and `return`.
Style/ReturnNil:
  Enabled: true

# Checks for the use of the `send` method.
Style/Send:
  Enabled: true

# Checks for places where classes with only class methods can be replaced with a
# module.
Style/StaticClass:
  Enabled: true

# Checks if uses of quotes match the configured preference.
Style/StringLiterals:
  EnforcedStyle: double_quotes

# Checks that quotes inside string, symbol, and regexp interpolations match the 
# configured preference.
Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

# Enforces the use of consistent method names from the String class.
Style/StringMethods:
  Enabled: true

# Checks for array literals made up of symbols that are not using the `%i()`
# syntax.
Style/SymbolArray:
  EnforcedStyle: brackets

# Checks for array literals made up of word-like strings, that are not using
# the `%w()` syntax.
Style/WordArray:
  EnforcedStyle: brackets

# Checks for the use of logical operators in an `unless` condition.
Style/UnlessLogicalOperators:
  Enabled: true
